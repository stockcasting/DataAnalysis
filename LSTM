{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"LSTM_0903_이동평균선2","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOmVn6Ms6TX0AB2THnzjqW5"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"3z2K0usEKuyS","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":50},"executionInfo":{"status":"ok","timestamp":1599440826128,"user_tz":-540,"elapsed":1824,"user":{"displayName":"김소흐","photoUrl":"","userId":"03433343599671756964"}},"outputId":"9d5eaf51-7313-4017-9931-a1aaf7b82fe4"},"source":["import numpy as np\n","import pandas as pd\n","import matplotlib as mpl\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import warnings\n","warnings.filterwarnings('ignore')\n","mpl.rcParams[\"font.family\"] = 'NanumBarunGothic'\n","mpl.rcParams['axes.unicode_minus'] = False\n","%matplotlib inline"],"execution_count":1,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"dg69qHH2KzDj","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599440830974,"user_tz":-540,"elapsed":3634,"user":{"displayName":"김소흐","photoUrl":"","userId":"03433343599671756964"}}},"source":["from keras.models import Sequential\n","from keras.layers import Dense, LSTM\n","from sklearn.preprocessing import MinMaxScaler\n","from sklearn.metrics import mean_squared_error"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"RjUw-rglK1b0","colab_type":"code","colab":{"resources":{"http://localhost:8080/nbextensions/google.colab/files.js":{"data":"Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCkgewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwogICAgICBwZXJjZW50LnRleHRDb250ZW50ID0KICAgICAgICAgIGAke01hdGgucm91bmQoKHBvc2l0aW9uIC8gZmlsZURhdGEuYnl0ZUxlbmd0aCkgKiAxMDApfSUgZG9uZWA7CiAgICB9CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK","ok":true,"headers":[["content-type","application/javascript"]],"status":200,"status_text":""}},"base_uri":"https://localhost:8080/","height":75},"executionInfo":{"status":"ok","timestamp":1599440861085,"user_tz":-540,"elapsed":26118,"user":{"displayName":"김소흐","photoUrl":"","userId":"03433343599671756964"}},"outputId":"e9c5d84a-0599-4129-a685-10c096b8e8e4"},"source":["from google.colab import files\n","uploaded=files.upload()"],"execution_count":3,"outputs":[{"output_type":"display_data","data":{"text/html":["\n","     <input type=\"file\" id=\"files-74a663b5-dc45-4aea-89ed-e4e995e839cc\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-74a663b5-dc45-4aea-89ed-e4e995e839cc\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script src=\"/nbextensions/google.colab/files.js\"></script> "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Saving SSE2015.csv to SSE2015.csv\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"uIvHHp4JK3OX","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":195},"executionInfo":{"status":"ok","timestamp":1599440863950,"user_tz":-540,"elapsed":640,"user":{"displayName":"김소흐","photoUrl":"","userId":"03433343599671756964"}},"outputId":"8c3fdd32-dca3-4569-8342-182dfbc42404"},"source":["import io\n","data=pd.read_csv(io.BytesIO(uploaded['SSE2015.csv']))\n","df=data\n","df.head()"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date</th>\n","      <th>Open</th>\n","      <th>High</th>\n","      <th>Low</th>\n","      <th>Close</th>\n","      <th>Volume</th>\n","      <th>Change</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2015-01-02</td>\n","      <td>26799</td>\n","      <td>26799</td>\n","      <td>26540</td>\n","      <td>26600</td>\n","      <td>175499</td>\n","      <td>0.002261</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2015-01-05</td>\n","      <td>26720</td>\n","      <td>26720</td>\n","      <td>26260</td>\n","      <td>26660</td>\n","      <td>202790</td>\n","      <td>0.002256</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2015-01-06</td>\n","      <td>26300</td>\n","      <td>26340</td>\n","      <td>25760</td>\n","      <td>25900</td>\n","      <td>304710</td>\n","      <td>-0.028507</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2015-01-07</td>\n","      <td>25880</td>\n","      <td>26220</td>\n","      <td>25640</td>\n","      <td>26140</td>\n","      <td>286455</td>\n","      <td>0.009266</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2015-01-08</td>\n","      <td>26780</td>\n","      <td>26780</td>\n","      <td>26199</td>\n","      <td>26280</td>\n","      <td>289552</td>\n","      <td>0.005356</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         Date   Open   High    Low  Close  Volume    Change\n","0  2015-01-02  26799  26799  26540  26600  175499  0.002261\n","1  2015-01-05  26720  26720  26260  26660  202790  0.002256\n","2  2015-01-06  26300  26340  25760  25900  304710 -0.028507\n","3  2015-01-07  25880  26220  25640  26140  286455  0.009266\n","4  2015-01-08  26780  26780  26199  26280  289552  0.005356"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"hSCq1usjK8zh","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599440869776,"user_tz":-540,"elapsed":743,"user":{"displayName":"김소흐","photoUrl":"","userId":"03433343599671756964"}}},"source":["idx = df.index[df['Date'] <= '2018-04-30'][-1]\n","df['Volume'].iloc[:idx] = df['Volume'].iloc[:idx]*50"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"X-M3LTPnK_2M","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":252},"executionInfo":{"status":"ok","timestamp":1599440881343,"user_tz":-540,"elapsed":803,"user":{"displayName":"김소흐","photoUrl":"","userId":"03433343599671756964"}},"outputId":"72013680-ad05-48f7-e0a2-a3c39452ee21"},"source":["index = df[df['Open'] <= 0].index\n","df.drop(index, inplace=True)\n","df.info()"],"execution_count":6,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 1347 entries, 0 to 1349\n","Data columns (total 7 columns):\n"," #   Column  Non-Null Count  Dtype  \n","---  ------  --------------  -----  \n"," 0   Date    1347 non-null   object \n"," 1   Open    1347 non-null   int64  \n"," 2   High    1347 non-null   int64  \n"," 3   Low     1347 non-null   int64  \n"," 4   Close   1347 non-null   int64  \n"," 5   Volume  1347 non-null   int64  \n"," 6   Change  1347 non-null   float64\n","dtypes: float64(1), int64(5), object(1)\n","memory usage: 84.2+ KB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XFWNdOrcLJgz","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":195},"executionInfo":{"status":"ok","timestamp":1599440883066,"user_tz":-540,"elapsed":738,"user":{"displayName":"김소흐","photoUrl":"","userId":"03433343599671756964"}},"outputId":"a185b69d-9167-4f0d-a43b-4df35516252e"},"source":["df['5days']=df['Close'].rolling(window=5).mean()\n","df['10days']=df['Close'].rolling(window=10).mean()\n","df['20days']=df['Close'].rolling(window=20).mean()\n","df['60days']=df['Close'].rolling(window=60).mean()\n","df['120days']=df['Close'].rolling(window=120).mean()\n","df.head()"],"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date</th>\n","      <th>Open</th>\n","      <th>High</th>\n","      <th>Low</th>\n","      <th>Close</th>\n","      <th>Volume</th>\n","      <th>Change</th>\n","      <th>5days</th>\n","      <th>10days</th>\n","      <th>20days</th>\n","      <th>60days</th>\n","      <th>120days</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2015-01-02</td>\n","      <td>26799</td>\n","      <td>26799</td>\n","      <td>26540</td>\n","      <td>26600</td>\n","      <td>8774950</td>\n","      <td>0.002261</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2015-01-05</td>\n","      <td>26720</td>\n","      <td>26720</td>\n","      <td>26260</td>\n","      <td>26660</td>\n","      <td>10139500</td>\n","      <td>0.002256</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2015-01-06</td>\n","      <td>26300</td>\n","      <td>26340</td>\n","      <td>25760</td>\n","      <td>25900</td>\n","      <td>15235500</td>\n","      <td>-0.028507</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2015-01-07</td>\n","      <td>25880</td>\n","      <td>26220</td>\n","      <td>25640</td>\n","      <td>26140</td>\n","      <td>14322750</td>\n","      <td>0.009266</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2015-01-08</td>\n","      <td>26780</td>\n","      <td>26780</td>\n","      <td>26199</td>\n","      <td>26280</td>\n","      <td>14477600</td>\n","      <td>0.005356</td>\n","      <td>26316.0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         Date   Open   High    Low  ...  10days  20days  60days  120days\n","0  2015-01-02  26799  26799  26540  ...     NaN     NaN     NaN      NaN\n","1  2015-01-05  26720  26720  26260  ...     NaN     NaN     NaN      NaN\n","2  2015-01-06  26300  26340  25760  ...     NaN     NaN     NaN      NaN\n","3  2015-01-07  25880  26220  25640  ...     NaN     NaN     NaN      NaN\n","4  2015-01-08  26780  26780  26199  ...     NaN     NaN     NaN      NaN\n","\n","[5 rows x 12 columns]"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"code","metadata":{"id":"tIyApxjFLXlb","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":195},"executionInfo":{"status":"ok","timestamp":1599440905539,"user_tz":-540,"elapsed":733,"user":{"displayName":"김소흐","photoUrl":"","userId":"03433343599671756964"}},"outputId":"555aae79-1eb1-4635-d7d2-c84acd528f3f"},"source":["#df3:NaN을 0으로 바꾼 데이터\n","df3=df\n","df3.fillna(0, inplace=True)\n","df3.head()"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date</th>\n","      <th>Open</th>\n","      <th>High</th>\n","      <th>Low</th>\n","      <th>Close</th>\n","      <th>Volume</th>\n","      <th>Change</th>\n","      <th>5days</th>\n","      <th>10days</th>\n","      <th>20days</th>\n","      <th>60days</th>\n","      <th>120days</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2015-01-02</td>\n","      <td>26799</td>\n","      <td>26799</td>\n","      <td>26540</td>\n","      <td>26600</td>\n","      <td>8774950</td>\n","      <td>0.002261</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2015-01-05</td>\n","      <td>26720</td>\n","      <td>26720</td>\n","      <td>26260</td>\n","      <td>26660</td>\n","      <td>10139500</td>\n","      <td>0.002256</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2015-01-06</td>\n","      <td>26300</td>\n","      <td>26340</td>\n","      <td>25760</td>\n","      <td>25900</td>\n","      <td>15235500</td>\n","      <td>-0.028507</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2015-01-07</td>\n","      <td>25880</td>\n","      <td>26220</td>\n","      <td>25640</td>\n","      <td>26140</td>\n","      <td>14322750</td>\n","      <td>0.009266</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2015-01-08</td>\n","      <td>26780</td>\n","      <td>26780</td>\n","      <td>26199</td>\n","      <td>26280</td>\n","      <td>14477600</td>\n","      <td>0.005356</td>\n","      <td>26316.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         Date   Open   High    Low  ...  10days  20days  60days  120days\n","0  2015-01-02  26799  26799  26540  ...     0.0     0.0     0.0      0.0\n","1  2015-01-05  26720  26720  26260  ...     0.0     0.0     0.0      0.0\n","2  2015-01-06  26300  26340  25760  ...     0.0     0.0     0.0      0.0\n","3  2015-01-07  25880  26220  25640  ...     0.0     0.0     0.0      0.0\n","4  2015-01-08  26780  26780  26199  ...     0.0     0.0     0.0      0.0\n","\n","[5 rows x 12 columns]"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"id":"EpKfK5IuP6tB","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599440912079,"user_tz":-540,"elapsed":818,"user":{"displayName":"김소흐","photoUrl":"","userId":"03433343599671756964"}}},"source":["df3.set_index('Date',inplace=True)"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"id":"mEgFGCORT4gA","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":225},"executionInfo":{"status":"ok","timestamp":1599440913492,"user_tz":-540,"elapsed":756,"user":{"displayName":"김소흐","photoUrl":"","userId":"03433343599671756964"}},"outputId":"05e36158-9bdd-46cc-d34f-b6de530e10c9"},"source":["df3.head()"],"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Open</th>\n","      <th>High</th>\n","      <th>Low</th>\n","      <th>Close</th>\n","      <th>Volume</th>\n","      <th>Change</th>\n","      <th>5days</th>\n","      <th>10days</th>\n","      <th>20days</th>\n","      <th>60days</th>\n","      <th>120days</th>\n","    </tr>\n","    <tr>\n","      <th>Date</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2015-01-02</th>\n","      <td>26799</td>\n","      <td>26799</td>\n","      <td>26540</td>\n","      <td>26600</td>\n","      <td>8774950</td>\n","      <td>0.002261</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2015-01-05</th>\n","      <td>26720</td>\n","      <td>26720</td>\n","      <td>26260</td>\n","      <td>26660</td>\n","      <td>10139500</td>\n","      <td>0.002256</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2015-01-06</th>\n","      <td>26300</td>\n","      <td>26340</td>\n","      <td>25760</td>\n","      <td>25900</td>\n","      <td>15235500</td>\n","      <td>-0.028507</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2015-01-07</th>\n","      <td>25880</td>\n","      <td>26220</td>\n","      <td>25640</td>\n","      <td>26140</td>\n","      <td>14322750</td>\n","      <td>0.009266</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2015-01-08</th>\n","      <td>26780</td>\n","      <td>26780</td>\n","      <td>26199</td>\n","      <td>26280</td>\n","      <td>14477600</td>\n","      <td>0.005356</td>\n","      <td>26316.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["             Open   High    Low  Close  ...  10days  20days  60days  120days\n","Date                                    ...                                 \n","2015-01-02  26799  26799  26540  26600  ...     0.0     0.0     0.0      0.0\n","2015-01-05  26720  26720  26260  26660  ...     0.0     0.0     0.0      0.0\n","2015-01-06  26300  26340  25760  25900  ...     0.0     0.0     0.0      0.0\n","2015-01-07  25880  26220  25640  26140  ...     0.0     0.0     0.0      0.0\n","2015-01-08  26780  26780  26199  26280  ...     0.0     0.0     0.0      0.0\n","\n","[5 rows x 11 columns]"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"id":"Xm9cDlgHT6L5","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599440928089,"user_tz":-540,"elapsed":720,"user":{"displayName":"김소흐","photoUrl":"","userId":"03433343599671756964"}}},"source":["scaler=MinMaxScaler()\n","scale_cols=['Open','High','Low','Close','Volume','Change','5days','10days','20days','60days','120days']\n","df_scaled=scaler.fit_transform(df[scale_cols])"],"execution_count":13,"outputs":[]},{"cell_type":"code","metadata":{"id":"wha_ejGGUTXz","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":252},"executionInfo":{"status":"ok","timestamp":1599440929529,"user_tz":-540,"elapsed":655,"user":{"displayName":"김소흐","photoUrl":"","userId":"03433343599671756964"}},"outputId":"d32c490f-2172-4a16-ce11-b20bd2fe8d97"},"source":["df_scaled=pd.DataFrame(df_scaled)\n","df_scaled.columns=scale_cols\n","print(df_scaled)"],"execution_count":14,"outputs":[{"output_type":"stream","text":["          Open      High       Low  ...    20days    60days   120days\n","0     0.133834  0.128727  0.143275  ...  0.000000  0.000000  0.000000\n","1     0.131890  0.126815  0.136452  ...  0.000000  0.000000  0.000000\n","2     0.121555  0.117619  0.124269  ...  0.000000  0.000000  0.000000\n","3     0.111220  0.114714  0.121345  ...  0.000000  0.000000  0.000000\n","4     0.133366  0.128267  0.134966  ...  0.000000  0.000000  0.000000\n","...        ...       ...       ...  ...       ...       ...       ...\n","1342  0.751476  0.784608  0.753899  ...  0.879674  0.869076  0.981225\n","1343  0.756398  0.762827  0.761209  ...  0.880923  0.870115  0.980626\n","1344  0.773622  0.784608  0.768519  ...  0.883088  0.871687  0.980334\n","1345  0.766240  0.767667  0.763645  ...  0.884087  0.873028  0.979858\n","1346  0.800689  0.784608  0.783138  ...  0.885253  0.875047  0.979443\n","\n","[1347 rows x 11 columns]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"76BxYRzvUXw7","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1599440935355,"user_tz":-540,"elapsed":746,"user":{"displayName":"김소흐","photoUrl":"","userId":"03433343599671756964"}},"outputId":"feeefd76-d3a3-4493-bf77-22de75b15a4a"},"source":["print(df3.shape)"],"execution_count":15,"outputs":[{"output_type":"stream","text":["(1347, 11)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"brZ1JRWsUaTk","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599440937148,"user_tz":-540,"elapsed":679,"user":{"displayName":"김소흐","photoUrl":"","userId":"03433343599671756964"}}},"source":["TEST_SIZE=200\n","train = df_scaled[:-TEST_SIZE]\n","test = df_scaled[-TEST_SIZE:]"],"execution_count":16,"outputs":[]},{"cell_type":"code","metadata":{"id":"MdUH3Xj4VmRe","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599440939011,"user_tz":-540,"elapsed":643,"user":{"displayName":"김소흐","photoUrl":"","userId":"03433343599671756964"}}},"source":["def make_dataset(data, label, window_size=20):\n","    feature_list = []\n","    label_list = []\n","    for i in range(len(data) - window_size):\n","        feature_list.append(np.array(data.iloc[i:i+window_size]))\n","        label_list.append(np.array(label.iloc[i+window_size]))\n","    return np.array(feature_list), np.array(label_list)"],"execution_count":17,"outputs":[]},{"cell_type":"code","metadata":{"id":"kLVaxD83Vo1w","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1599440941202,"user_tz":-540,"elapsed":1104,"user":{"displayName":"김소흐","photoUrl":"","userId":"03433343599671756964"}},"outputId":"1fad4574-9406-4055-f79a-60e7681d6639"},"source":["feature_cols = ['Open', 'High', 'Low', 'Volume','5days','10days','20days','60days','120days']\n","label_cols = ['Close']\n","\n","train_feature = train[feature_cols]\n","train_label = train[label_cols]\n","\n","train_feature, train_label = make_dataset(train_feature, train_label, 20)\n","\n","from sklearn.model_selection import train_test_split\n","x_train, x_valid, y_train, y_valid = train_test_split(train_feature, train_label, test_size=0.2)\n","\n","x_train.shape, x_valid.shape"],"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((901, 20, 9), (226, 20, 9))"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"code","metadata":{"id":"oNq1mzlZV3sC","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1599440943075,"user_tz":-540,"elapsed":789,"user":{"displayName":"김소흐","photoUrl":"","userId":"03433343599671756964"}},"outputId":"66415323-7863-462f-b65c-5cc30868c958"},"source":["test_feature=test[feature_cols]\n","test_label=test[label_cols]\n","\n","test_feature, test_label = make_dataset(test_feature, test_label, 20)\n","test_feature.shape, test_label.shape"],"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((180, 20, 9), (180, 1))"]},"metadata":{"tags":[]},"execution_count":19}]},{"cell_type":"code","metadata":{"id":"Fz7ugRvTV9oJ","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599440944787,"user_tz":-540,"elapsed":853,"user":{"displayName":"김소흐","photoUrl":"","userId":"03433343599671756964"}}},"source":["from keras.models import Sequential\n","from keras.layers import Dense\n","from keras.callbacks import EarlyStopping, ModelCheckpoint\n","from keras.layers import LSTM\n","\n","model = Sequential()\n","model.add(LSTM(16, \n","               input_shape=(train_feature.shape[1], train_feature.shape[2]), \n","               activation='relu', \n","               return_sequences=False)\n","          )\n","model.add(Dense(1))"],"execution_count":20,"outputs":[]},{"cell_type":"code","metadata":{"id":"7NV6MYKSV_tz","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1599441321086,"user_tz":-540,"elapsed":371517,"user":{"displayName":"김소흐","photoUrl":"","userId":"03433343599671756964"}},"outputId":"054e6051-5d25-4dbe-c74c-a9775e14428b"},"source":["model.compile(loss='mse',optimizer='adam',metrics=['mse'])\n","\n","from keras.callbacks import EarlyStopping\n","early_stopping=EarlyStopping(patience=20)\n","model.fit(x_train,y_train,epochs=100,batch_size=1,validation_split=0,callbacks=[early_stopping])"],"execution_count":21,"outputs":[{"output_type":"stream","text":["Epoch 1/100\n","898/901 [============================>.] - ETA: 0s - loss: 0.0094 - mse: 0.0094WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 0.0094 - mse: 0.0094\n","Epoch 2/100\n","892/901 [============================>.] - ETA: 0s - loss: 0.0014 - mse: 0.0014WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 0.0014 - mse: 0.0014\n","Epoch 3/100\n","896/901 [============================>.] - ETA: 0s - loss: 9.0975e-04 - mse: 9.0975e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 9.0851e-04 - mse: 9.0851e-04\n","Epoch 4/100\n","889/901 [============================>.] - ETA: 0s - loss: 7.4000e-04 - mse: 7.4000e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 7.4023e-04 - mse: 7.4023e-04\n","Epoch 5/100\n","897/901 [============================>.] - ETA: 0s - loss: 6.6015e-04 - mse: 6.6015e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 6.5778e-04 - mse: 6.5778e-04\n","Epoch 6/100\n","891/901 [============================>.] - ETA: 0s - loss: 6.9210e-04 - mse: 6.9210e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 6.8943e-04 - mse: 6.8943e-04\n","Epoch 7/100\n","892/901 [============================>.] - ETA: 0s - loss: 6.1388e-04 - mse: 6.1388e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 6.1062e-04 - mse: 6.1062e-04\n","Epoch 8/100\n","897/901 [============================>.] - ETA: 0s - loss: 6.1040e-04 - mse: 6.1040e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 6.1112e-04 - mse: 6.1112e-04\n","Epoch 9/100\n","898/901 [============================>.] - ETA: 0s - loss: 5.2774e-04 - mse: 5.2774e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 5.2707e-04 - mse: 5.2707e-04\n","Epoch 10/100\n","891/901 [============================>.] - ETA: 0s - loss: 5.5002e-04 - mse: 5.5002e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 5.5189e-04 - mse: 5.5189e-04\n","Epoch 11/100\n","900/901 [============================>.] - ETA: 0s - loss: 4.8195e-04 - mse: 4.8195e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 4.8201e-04 - mse: 4.8201e-04\n","Epoch 12/100\n","895/901 [============================>.] - ETA: 0s - loss: 5.0764e-04 - mse: 5.0764e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 5.0665e-04 - mse: 5.0665e-04\n","Epoch 13/100\n","896/901 [============================>.] - ETA: 0s - loss: 5.1881e-04 - mse: 5.1881e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 5.2195e-04 - mse: 5.2195e-04\n","Epoch 14/100\n","891/901 [============================>.] - ETA: 0s - loss: 4.8281e-04 - mse: 4.8281e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 4.8576e-04 - mse: 4.8576e-04\n","Epoch 15/100\n","893/901 [============================>.] - ETA: 0s - loss: 4.5568e-04 - mse: 4.5568e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 4.5517e-04 - mse: 4.5517e-04\n","Epoch 16/100\n","898/901 [============================>.] - ETA: 0s - loss: 4.1519e-04 - mse: 4.1519e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 4.1750e-04 - mse: 4.1750e-04\n","Epoch 17/100\n","889/901 [============================>.] - ETA: 0s - loss: 4.5119e-04 - mse: 4.5119e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 4.4883e-04 - mse: 4.4883e-04\n","Epoch 18/100\n","892/901 [============================>.] - ETA: 0s - loss: 4.2110e-04 - mse: 4.2110e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 4.2331e-04 - mse: 4.2331e-04\n","Epoch 19/100\n","896/901 [============================>.] - ETA: 0s - loss: 4.3898e-04 - mse: 4.3898e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 4.3847e-04 - mse: 4.3847e-04\n","Epoch 20/100\n","890/901 [============================>.] - ETA: 0s - loss: 4.3593e-04 - mse: 4.3593e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 5ms/step - loss: 4.3342e-04 - mse: 4.3342e-04\n","Epoch 21/100\n","889/901 [============================>.] - ETA: 0s - loss: 4.2934e-04 - mse: 4.2934e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 4.2940e-04 - mse: 4.2940e-04\n","Epoch 22/100\n","896/901 [============================>.] - ETA: 0s - loss: 4.1833e-04 - mse: 4.1833e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 4.1685e-04 - mse: 4.1685e-04\n","Epoch 23/100\n","896/901 [============================>.] - ETA: 0s - loss: 4.1514e-04 - mse: 4.1514e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 4.1562e-04 - mse: 4.1562e-04\n","Epoch 24/100\n","893/901 [============================>.] - ETA: 0s - loss: 4.5521e-04 - mse: 4.5521e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 4.5686e-04 - mse: 4.5686e-04\n","Epoch 25/100\n","890/901 [============================>.] - ETA: 0s - loss: 4.0221e-04 - mse: 4.0221e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 4.0097e-04 - mse: 4.0097e-04\n","Epoch 26/100\n","889/901 [============================>.] - ETA: 0s - loss: 4.0692e-04 - mse: 4.0692e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 4.1095e-04 - mse: 4.1095e-04\n","Epoch 27/100\n","898/901 [============================>.] - ETA: 0s - loss: 4.1921e-04 - mse: 4.1921e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 4.1840e-04 - mse: 4.1840e-04\n","Epoch 28/100\n","901/901 [==============================] - ETA: 0s - loss: 3.8084e-04 - mse: 3.8084e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.8084e-04 - mse: 3.8084e-04\n","Epoch 29/100\n","897/901 [============================>.] - ETA: 0s - loss: 4.1000e-04 - mse: 4.1000e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 4.0876e-04 - mse: 4.0876e-04\n","Epoch 30/100\n","901/901 [==============================] - ETA: 0s - loss: 4.2827e-04 - mse: 4.2827e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 4.2827e-04 - mse: 4.2827e-04\n","Epoch 31/100\n","896/901 [============================>.] - ETA: 0s - loss: 4.0821e-04 - mse: 4.0821e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 4.0768e-04 - mse: 4.0768e-04\n","Epoch 32/100\n","892/901 [============================>.] - ETA: 0s - loss: 4.0499e-04 - mse: 4.0499e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 4.0426e-04 - mse: 4.0426e-04\n","Epoch 33/100\n","899/901 [============================>.] - ETA: 0s - loss: 4.1270e-04 - mse: 4.1270e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 4.1181e-04 - mse: 4.1181e-04\n","Epoch 34/100\n","897/901 [============================>.] - ETA: 0s - loss: 4.2178e-04 - mse: 4.2178e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 4.2041e-04 - mse: 4.2041e-04\n","Epoch 35/100\n","898/901 [============================>.] - ETA: 0s - loss: 3.7894e-04 - mse: 3.7894e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.8069e-04 - mse: 3.8069e-04\n","Epoch 36/100\n","897/901 [============================>.] - ETA: 0s - loss: 3.9663e-04 - mse: 3.9663e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.9623e-04 - mse: 3.9623e-04\n","Epoch 37/100\n","897/901 [============================>.] - ETA: 0s - loss: 3.9599e-04 - mse: 3.9599e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.9556e-04 - mse: 3.9556e-04\n","Epoch 38/100\n","901/901 [==============================] - ETA: 0s - loss: 3.5842e-04 - mse: 3.5842e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.5842e-04 - mse: 3.5842e-04\n","Epoch 39/100\n","891/901 [============================>.] - ETA: 0s - loss: 3.8939e-04 - mse: 3.8939e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.8584e-04 - mse: 3.8584e-04\n","Epoch 40/100\n","889/901 [============================>.] - ETA: 0s - loss: 3.9493e-04 - mse: 3.9493e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.9145e-04 - mse: 3.9145e-04\n","Epoch 41/100\n","899/901 [============================>.] - ETA: 0s - loss: 3.9124e-04 - mse: 3.9124e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.9080e-04 - mse: 3.9080e-04\n","Epoch 42/100\n","893/901 [============================>.] - ETA: 0s - loss: 3.6026e-04 - mse: 3.6026e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.6055e-04 - mse: 3.6055e-04\n","Epoch 43/100\n","893/901 [============================>.] - ETA: 0s - loss: 3.9582e-04 - mse: 3.9582e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.9601e-04 - mse: 3.9601e-04\n","Epoch 44/100\n","890/901 [============================>.] - ETA: 0s - loss: 4.0742e-04 - mse: 4.0742e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 4.1208e-04 - mse: 4.1208e-04\n","Epoch 45/100\n","890/901 [============================>.] - ETA: 0s - loss: 3.7289e-04 - mse: 3.7289e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.7214e-04 - mse: 3.7214e-04\n","Epoch 46/100\n","899/901 [============================>.] - ETA: 0s - loss: 3.9480e-04 - mse: 3.9480e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.9401e-04 - mse: 3.9401e-04\n","Epoch 47/100\n","901/901 [==============================] - ETA: 0s - loss: 4.1112e-04 - mse: 4.1112e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 4.1112e-04 - mse: 4.1112e-04\n","Epoch 48/100\n","891/901 [============================>.] - ETA: 0s - loss: 3.7181e-04 - mse: 3.7181e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.7644e-04 - mse: 3.7644e-04\n","Epoch 49/100\n","901/901 [==============================] - ETA: 0s - loss: 3.9362e-04 - mse: 3.9362e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.9362e-04 - mse: 3.9362e-04\n","Epoch 50/100\n","893/901 [============================>.] - ETA: 0s - loss: 3.8693e-04 - mse: 3.8693e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.9192e-04 - mse: 3.9192e-04\n","Epoch 51/100\n","889/901 [============================>.] - ETA: 0s - loss: 3.6922e-04 - mse: 3.6922e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.6711e-04 - mse: 3.6711e-04\n","Epoch 52/100\n","900/901 [============================>.] - ETA: 0s - loss: 3.6847e-04 - mse: 3.6847e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.6809e-04 - mse: 3.6809e-04\n","Epoch 53/100\n","892/901 [============================>.] - ETA: 0s - loss: 3.8595e-04 - mse: 3.8595e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.8483e-04 - mse: 3.8483e-04\n","Epoch 54/100\n","899/901 [============================>.] - ETA: 0s - loss: 3.9252e-04 - mse: 3.9252e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.9262e-04 - mse: 3.9262e-04\n","Epoch 55/100\n","895/901 [============================>.] - ETA: 0s - loss: 3.5831e-04 - mse: 3.5831e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.6044e-04 - mse: 3.6044e-04\n","Epoch 56/100\n","888/901 [============================>.] - ETA: 0s - loss: 3.7694e-04 - mse: 3.7694e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.7773e-04 - mse: 3.7773e-04\n","Epoch 57/100\n","897/901 [============================>.] - ETA: 0s - loss: 3.8898e-04 - mse: 3.8898e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.9098e-04 - mse: 3.9098e-04\n","Epoch 58/100\n","895/901 [============================>.] - ETA: 0s - loss: 3.7397e-04 - mse: 3.7397e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.7233e-04 - mse: 3.7233e-04\n","Epoch 59/100\n","894/901 [============================>.] - ETA: 0s - loss: 3.5371e-04 - mse: 3.5371e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.5632e-04 - mse: 3.5632e-04\n","Epoch 60/100\n","896/901 [============================>.] - ETA: 0s - loss: 3.6442e-04 - mse: 3.6442e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.6468e-04 - mse: 3.6468e-04\n","Epoch 61/100\n","891/901 [============================>.] - ETA: 0s - loss: 3.5756e-04 - mse: 3.5756e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.6158e-04 - mse: 3.6158e-04\n","Epoch 62/100\n","897/901 [============================>.] - ETA: 0s - loss: 3.8041e-04 - mse: 3.8041e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.8014e-04 - mse: 3.8014e-04\n","Epoch 63/100\n","901/901 [==============================] - ETA: 0s - loss: 3.7943e-04 - mse: 3.7943e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.7943e-04 - mse: 3.7943e-04\n","Epoch 64/100\n","897/901 [============================>.] - ETA: 0s - loss: 3.8269e-04 - mse: 3.8269e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.8217e-04 - mse: 3.8217e-04\n","Epoch 65/100\n","889/901 [============================>.] - ETA: 0s - loss: 3.6266e-04 - mse: 3.6266e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.6354e-04 - mse: 3.6354e-04\n","Epoch 66/100\n","893/901 [============================>.] - ETA: 0s - loss: 3.5781e-04 - mse: 3.5781e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.6015e-04 - mse: 3.6015e-04\n","Epoch 67/100\n","896/901 [============================>.] - ETA: 0s - loss: 3.6525e-04 - mse: 3.6525e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.6494e-04 - mse: 3.6494e-04\n","Epoch 68/100\n","897/901 [============================>.] - ETA: 0s - loss: 3.5014e-04 - mse: 3.5014e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.4893e-04 - mse: 3.4893e-04\n","Epoch 69/100\n","899/901 [============================>.] - ETA: 0s - loss: 3.5525e-04 - mse: 3.5525e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.5713e-04 - mse: 3.5713e-04\n","Epoch 70/100\n","890/901 [============================>.] - ETA: 0s - loss: 3.6804e-04 - mse: 3.6804e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.6485e-04 - mse: 3.6485e-04\n","Epoch 71/100\n","896/901 [============================>.] - ETA: 0s - loss: 3.6146e-04 - mse: 3.6146e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.6169e-04 - mse: 3.6169e-04\n","Epoch 72/100\n","901/901 [==============================] - ETA: 0s - loss: 3.8545e-04 - mse: 3.8545e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.8545e-04 - mse: 3.8545e-04\n","Epoch 73/100\n","895/901 [============================>.] - ETA: 0s - loss: 3.6481e-04 - mse: 3.6481e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.7283e-04 - mse: 3.7283e-04\n","Epoch 74/100\n","898/901 [============================>.] - ETA: 0s - loss: 3.5575e-04 - mse: 3.5575e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.5472e-04 - mse: 3.5472e-04\n","Epoch 75/100\n","897/901 [============================>.] - ETA: 0s - loss: 3.5343e-04 - mse: 3.5343e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.5330e-04 - mse: 3.5330e-04\n","Epoch 76/100\n","900/901 [============================>.] - ETA: 0s - loss: 3.5701e-04 - mse: 3.5701e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.5697e-04 - mse: 3.5697e-04\n","Epoch 77/100\n","888/901 [============================>.] - ETA: 0s - loss: 3.5816e-04 - mse: 3.5816e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.5475e-04 - mse: 3.5475e-04\n","Epoch 78/100\n","889/901 [============================>.] - ETA: 0s - loss: 3.7708e-04 - mse: 3.7708e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.7762e-04 - mse: 3.7762e-04\n","Epoch 79/100\n","898/901 [============================>.] - ETA: 0s - loss: 3.8515e-04 - mse: 3.8515e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.8464e-04 - mse: 3.8464e-04\n","Epoch 80/100\n","891/901 [============================>.] - ETA: 0s - loss: 3.5245e-04 - mse: 3.5245e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.5078e-04 - mse: 3.5078e-04\n","Epoch 81/100\n","901/901 [==============================] - ETA: 0s - loss: 3.5973e-04 - mse: 3.5973e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.5973e-04 - mse: 3.5973e-04\n","Epoch 82/100\n","890/901 [============================>.] - ETA: 0s - loss: 3.4909e-04 - mse: 3.4909e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.5171e-04 - mse: 3.5171e-04\n","Epoch 83/100\n","899/901 [============================>.] - ETA: 0s - loss: 3.7303e-04 - mse: 3.7303e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.7227e-04 - mse: 3.7227e-04\n","Epoch 84/100\n","891/901 [============================>.] - ETA: 0s - loss: 3.6087e-04 - mse: 3.6087e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.6068e-04 - mse: 3.6068e-04\n","Epoch 85/100\n","893/901 [============================>.] - ETA: 0s - loss: 3.5852e-04 - mse: 3.5852e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.5766e-04 - mse: 3.5766e-04\n","Epoch 86/100\n","892/901 [============================>.] - ETA: 0s - loss: 3.5699e-04 - mse: 3.5699e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 3s 4ms/step - loss: 3.5623e-04 - mse: 3.5623e-04\n","Epoch 87/100\n","894/901 [============================>.] - ETA: 0s - loss: 3.5749e-04 - mse: 3.5749e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.5616e-04 - mse: 3.5616e-04\n","Epoch 88/100\n","897/901 [============================>.] - ETA: 0s - loss: 3.7129e-04 - mse: 3.7129e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.7561e-04 - mse: 3.7561e-04\n","Epoch 89/100\n","890/901 [============================>.] - ETA: 0s - loss: 3.8151e-04 - mse: 3.8151e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 3s 4ms/step - loss: 3.8313e-04 - mse: 3.8313e-04\n","Epoch 90/100\n","896/901 [============================>.] - ETA: 0s - loss: 3.6506e-04 - mse: 3.6506e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.6331e-04 - mse: 3.6331e-04\n","Epoch 91/100\n","892/901 [============================>.] - ETA: 0s - loss: 3.4154e-04 - mse: 3.4154e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.3972e-04 - mse: 3.3972e-04\n","Epoch 92/100\n","892/901 [============================>.] - ETA: 0s - loss: 3.7201e-04 - mse: 3.7201e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 3s 4ms/step - loss: 3.7277e-04 - mse: 3.7277e-04\n","Epoch 93/100\n","891/901 [============================>.] - ETA: 0s - loss: 3.7502e-04 - mse: 3.7502e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.7139e-04 - mse: 3.7139e-04\n","Epoch 94/100\n","898/901 [============================>.] - ETA: 0s - loss: 3.3943e-04 - mse: 3.3943e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 3s 4ms/step - loss: 3.3905e-04 - mse: 3.3905e-04\n","Epoch 95/100\n","893/901 [============================>.] - ETA: 0s - loss: 3.4246e-04 - mse: 3.4246e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.4687e-04 - mse: 3.4687e-04\n","Epoch 96/100\n","901/901 [==============================] - ETA: 0s - loss: 3.4592e-04 - mse: 3.4592e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.4592e-04 - mse: 3.4592e-04\n","Epoch 97/100\n","888/901 [============================>.] - ETA: 0s - loss: 3.6621e-04 - mse: 3.6621e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.6992e-04 - mse: 3.6992e-04\n","Epoch 98/100\n","892/901 [============================>.] - ETA: 0s - loss: 3.4724e-04 - mse: 3.4724e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.4847e-04 - mse: 3.4847e-04\n","Epoch 99/100\n","892/901 [============================>.] - ETA: 0s - loss: 3.3497e-04 - mse: 3.3497e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 4s 4ms/step - loss: 3.3408e-04 - mse: 3.3408e-04\n","Epoch 100/100\n","891/901 [============================>.] - ETA: 0s - loss: 3.5452e-04 - mse: 3.5452e-04WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse\n","901/901 [==============================] - 3s 4ms/step - loss: 3.5157e-04 - mse: 3.5157e-04\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7f98fa2e0518>"]},"metadata":{"tags":[]},"execution_count":21}]},{"cell_type":"code","metadata":{"id":"WR34ssCuWDMV","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599441455885,"user_tz":-540,"elapsed":665,"user":{"displayName":"김소흐","photoUrl":"","userId":"03433343599671756964"}}},"source":["pred=model.predict(test_feature)"],"execution_count":22,"outputs":[]},{"cell_type":"code","metadata":{"id":"TEjoWVYyXjUY","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":509},"executionInfo":{"status":"ok","timestamp":1599441457812,"user_tz":-540,"elapsed":989,"user":{"displayName":"김소흐","photoUrl":"","userId":"03433343599671756964"}},"outputId":"fb1224a7-7351-4242-cbd9-08481b485570"},"source":["plt.figure(figsize=(12, 9))\n","plt.plot(test_label, label='actual')\n","plt.plot(pred, label='prediction')\n","plt.legend()\n","plt.show()"],"execution_count":23,"outputs":[{"output_type":"stream","text":["findfont: Font family ['NanumBarunGothic'] not found. Falling back to DejaVu Sans.\n"],"name":"stderr"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 864x648 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"ALabOkdZXmtr","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":50},"executionInfo":{"status":"ok","timestamp":1599441466593,"user_tz":-540,"elapsed":2351,"user":{"displayName":"김소흐","photoUrl":"","userId":"03433343599671756964"}},"outputId":"81af9030-bfc3-4b07-ddbd-9545e3f526d4"},"source":["trainScore = model.evaluate(x_train, y_train, batch_size=1, verbose=0)\n","model.reset_states()\n","print('Train Score: ', trainScore)\n","valScore = model.evaluate(x_valid, y_valid, batch_size=1, verbose=0)\n","model.reset_states()\n","print('Validataion Score: ', valScore)\n"],"execution_count":24,"outputs":[{"output_type":"stream","text":["Train Score:  [0.0002993944217450917, 0.0002993944217450917]\n","Validataion Score:  [0.00028759523411281407, 0.00028759523411281407]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"WfmnmJ8QXqIQ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1599441469554,"user_tz":-540,"elapsed":844,"user":{"displayName":"김소흐","photoUrl":"","userId":"03433343599671756964"}},"outputId":"1b075a02-ac48-4ddf-d16c-350a8c565fb0"},"source":["mse=mean_squared_error(test_label, pred)\n","rmse=np.sqrt(mse)\n","rmse"],"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.031106265823851894"]},"metadata":{"tags":[]},"execution_count":25}]},{"cell_type":"code","metadata":{"id":"gx7JvQh-LRq2","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":163},"executionInfo":{"status":"error","timestamp":1599443856742,"user_tz":-540,"elapsed":719,"user":{"displayName":"김소흐","photoUrl":"","userId":"03433343599671756964"}},"outputId":"74d2f0c5-0473-4370-9f60-75a755097b1f"},"source":["scaler1.min_, scaler1.scale_, scaler1.data_min_, scaler1.data_max_"],"execution_count":44,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-44-3b7623c9cec3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mscaler1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmin_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscaler1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscale_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscaler1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata_min_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscaler1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata_max_\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'scaler1' is not defined"]}]},{"cell_type":"code","metadata":{"id":"Bh3GyNdfRGzJ","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]}]}